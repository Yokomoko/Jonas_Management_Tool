//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BL_JonasSageImporter
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Purchase_SaleLedgerEntities : DbContext
    {
        public Purchase_SaleLedgerEntities()
            : base("name=Purchase_SaleLedgerEntities") {
        }

        public Purchase_SaleLedgerEntities(string connectionString)
            : base("name=" + connectionString) {
        }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdminStatus> AdminStatuses { get; set; }
        public virtual DbSet<Configuration> Configurations { get; set; }
        public virtual DbSet<CostOfGoodsSold> CostOfGoodsSolds { get; set; }
        public virtual DbSet<EntryType> EntryTypes { get; set; }
        public virtual DbSet<GLType> GLTypes { get; set; }
        public virtual DbSet<GP_Temp_InvoiceLedger> GP_Temp_InvoiceLedger { get; set; }
        public virtual DbSet<GP_Temp_OutstandingInvoices> GP_Temp_OutstandingInvoices { get; set; }
        public virtual DbSet<GP_Temp_PostedInvoices> GP_Temp_PostedInvoices { get; set; }
        public virtual DbSet<JonasGroup> JonasGroups { get; set; }
        public virtual DbSet<JonasType> JonasTypes { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<MaintenanceGLBridge> MaintenanceGLBridges { get; set; }
        public virtual DbSet<MaintenanceType> MaintenanceTypes { get; set; }
        public virtual DbSet<Number> Numbers { get; set; }
        public virtual DbSet<OutstandingInvoice> OutstandingInvoices { get; set; }
        public virtual DbSet<PostedInvoice> PostedInvoices { get; set; }
        public virtual DbSet<Sage_Temp_InvoiceLedger> Sage_Temp_InvoiceLedger { get; set; }
        public virtual DbSet<SaleLedger> SaleLedgers { get; set; }
        public virtual DbSet<SalesBacklogHistory> SalesBacklogHistories { get; set; }
        public virtual DbSet<Status> Statuses { get; set; }
        public virtual DbSet<Temp_OrderLedger> Temp_OrderLedger { get; set; }
        public virtual DbSet<TerminalType> TerminalTypes { get; set; }
        public virtual DbSet<OutstandingInvoicesExtended> OutstandingInvoicesExtendeds { get; set; }
        public virtual DbSet<PostedInvoicesExtended> PostedInvoicesExtendeds { get; set; }
        public virtual DbSet<SaleLedgerExtended> SaleLedgerExtendeds { get; set; }
        public virtual DbSet<vw_GenerateCogsReport> vw_GenerateCogsReport { get; set; }
    
        public virtual int CRM_Grid_ImportOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_Grid_ImportOrders");
        }
    
        public virtual int CRM_Grid_ImportOrders_Adv(Nullable<System.DateTime> date, string custName, string siteName, string custRef, Nullable<System.DateTime> dueDate, string category, string itemDescription, Nullable<decimal> qty, Nullable<decimal> net, Nullable<decimal> tax, Nullable<decimal> gross, Nullable<decimal> profit, string currency, string custOrderNo, Nullable<short> miniPack, string siteSurveyDate, string backlogComments, string deposit, string assignedTo, string megJobNo, Nullable<short> directDebit)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var custNameParameter = custName != null ?
                new ObjectParameter("CustName", custName) :
                new ObjectParameter("CustName", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var custRefParameter = custRef != null ?
                new ObjectParameter("CustRef", custRef) :
                new ObjectParameter("CustRef", typeof(string));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var netParameter = net.HasValue ?
                new ObjectParameter("Net", net) :
                new ObjectParameter("Net", typeof(decimal));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var grossParameter = gross.HasValue ?
                new ObjectParameter("Gross", gross) :
                new ObjectParameter("Gross", typeof(decimal));
    
            var profitParameter = profit.HasValue ?
                new ObjectParameter("Profit", profit) :
                new ObjectParameter("Profit", typeof(decimal));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var custOrderNoParameter = custOrderNo != null ?
                new ObjectParameter("CustOrderNo", custOrderNo) :
                new ObjectParameter("CustOrderNo", typeof(string));
    
            var miniPackParameter = miniPack.HasValue ?
                new ObjectParameter("MiniPack", miniPack) :
                new ObjectParameter("MiniPack", typeof(short));
    
            var siteSurveyDateParameter = siteSurveyDate != null ?
                new ObjectParameter("SiteSurveyDate", siteSurveyDate) :
                new ObjectParameter("SiteSurveyDate", typeof(string));
    
            var backlogCommentsParameter = backlogComments != null ?
                new ObjectParameter("BacklogComments", backlogComments) :
                new ObjectParameter("BacklogComments", typeof(string));
    
            var depositParameter = deposit != null ?
                new ObjectParameter("Deposit", deposit) :
                new ObjectParameter("Deposit", typeof(string));
    
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var megJobNoParameter = megJobNo != null ?
                new ObjectParameter("MegJobNo", megJobNo) :
                new ObjectParameter("MegJobNo", typeof(string));
    
            var directDebitParameter = directDebit.HasValue ?
                new ObjectParameter("DirectDebit", directDebit) :
                new ObjectParameter("DirectDebit", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_Grid_ImportOrders_Adv", dateParameter, custNameParameter, siteNameParameter, custRefParameter, dueDateParameter, categoryParameter, itemDescriptionParameter, qtyParameter, netParameter, taxParameter, grossParameter, profitParameter, currencyParameter, custOrderNoParameter, miniPackParameter, siteSurveyDateParameter, backlogCommentsParameter, depositParameter, assignedToParameter, megJobNoParameter, directDebitParameter);
        }
    
        public virtual int CRM_Grid_ImportOrders_Adv2(Nullable<System.DateTime> date, string custName, string siteName, string custRef, Nullable<System.DateTime> dueDate, string category, string itemDescription, Nullable<decimal> qty, Nullable<decimal> net, Nullable<decimal> tax, Nullable<decimal> gross, Nullable<decimal> profit, string currency, string custOrderNo, Nullable<short> miniPack, string siteSurveyDate, string backlogComments, string deposit, string assignedTo, string megJobNo, Nullable<short> directDebit, string spare1)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var custNameParameter = custName != null ?
                new ObjectParameter("CustName", custName) :
                new ObjectParameter("CustName", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var custRefParameter = custRef != null ?
                new ObjectParameter("CustRef", custRef) :
                new ObjectParameter("CustRef", typeof(string));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var netParameter = net.HasValue ?
                new ObjectParameter("Net", net) :
                new ObjectParameter("Net", typeof(decimal));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var grossParameter = gross.HasValue ?
                new ObjectParameter("Gross", gross) :
                new ObjectParameter("Gross", typeof(decimal));
    
            var profitParameter = profit.HasValue ?
                new ObjectParameter("Profit", profit) :
                new ObjectParameter("Profit", typeof(decimal));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var custOrderNoParameter = custOrderNo != null ?
                new ObjectParameter("CustOrderNo", custOrderNo) :
                new ObjectParameter("CustOrderNo", typeof(string));
    
            var miniPackParameter = miniPack.HasValue ?
                new ObjectParameter("MiniPack", miniPack) :
                new ObjectParameter("MiniPack", typeof(short));
    
            var siteSurveyDateParameter = siteSurveyDate != null ?
                new ObjectParameter("SiteSurveyDate", siteSurveyDate) :
                new ObjectParameter("SiteSurveyDate", typeof(string));
    
            var backlogCommentsParameter = backlogComments != null ?
                new ObjectParameter("BacklogComments", backlogComments) :
                new ObjectParameter("BacklogComments", typeof(string));
    
            var depositParameter = deposit != null ?
                new ObjectParameter("Deposit", deposit) :
                new ObjectParameter("Deposit", typeof(string));
    
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var megJobNoParameter = megJobNo != null ?
                new ObjectParameter("MegJobNo", megJobNo) :
                new ObjectParameter("MegJobNo", typeof(string));
    
            var directDebitParameter = directDebit.HasValue ?
                new ObjectParameter("DirectDebit", directDebit) :
                new ObjectParameter("DirectDebit", typeof(short));
    
            var spare1Parameter = spare1 != null ?
                new ObjectParameter("Spare1", spare1) :
                new ObjectParameter("Spare1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_Grid_ImportOrders_Adv2", dateParameter, custNameParameter, siteNameParameter, custRefParameter, dueDateParameter, categoryParameter, itemDescriptionParameter, qtyParameter, netParameter, taxParameter, grossParameter, profitParameter, currencyParameter, custOrderNoParameter, miniPackParameter, siteSurveyDateParameter, backlogCommentsParameter, depositParameter, assignedToParameter, megJobNoParameter, directDebitParameter, spare1Parameter);
        }
    
        public virtual int CRM_Grid_ImportOrders_Adv3(Nullable<System.DateTime> date, string custName, string siteName, string custRef, Nullable<System.DateTime> dueDate, string category, string itemDescription, Nullable<decimal> qty, Nullable<decimal> net, Nullable<decimal> tax, Nullable<decimal> gross, Nullable<decimal> profit, string currency, string custOrderNo, Nullable<short> miniPack, string siteSurveyDate, string backlogComments, string deposit, string assignedTo, string megJobNo, Nullable<short> directDebit, string spare1, string spare2)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var custNameParameter = custName != null ?
                new ObjectParameter("CustName", custName) :
                new ObjectParameter("CustName", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var custRefParameter = custRef != null ?
                new ObjectParameter("CustRef", custRef) :
                new ObjectParameter("CustRef", typeof(string));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var netParameter = net.HasValue ?
                new ObjectParameter("Net", net) :
                new ObjectParameter("Net", typeof(decimal));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var grossParameter = gross.HasValue ?
                new ObjectParameter("Gross", gross) :
                new ObjectParameter("Gross", typeof(decimal));
    
            var profitParameter = profit.HasValue ?
                new ObjectParameter("Profit", profit) :
                new ObjectParameter("Profit", typeof(decimal));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var custOrderNoParameter = custOrderNo != null ?
                new ObjectParameter("CustOrderNo", custOrderNo) :
                new ObjectParameter("CustOrderNo", typeof(string));
    
            var miniPackParameter = miniPack.HasValue ?
                new ObjectParameter("MiniPack", miniPack) :
                new ObjectParameter("MiniPack", typeof(short));
    
            var siteSurveyDateParameter = siteSurveyDate != null ?
                new ObjectParameter("SiteSurveyDate", siteSurveyDate) :
                new ObjectParameter("SiteSurveyDate", typeof(string));
    
            var backlogCommentsParameter = backlogComments != null ?
                new ObjectParameter("BacklogComments", backlogComments) :
                new ObjectParameter("BacklogComments", typeof(string));
    
            var depositParameter = deposit != null ?
                new ObjectParameter("Deposit", deposit) :
                new ObjectParameter("Deposit", typeof(string));
    
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var megJobNoParameter = megJobNo != null ?
                new ObjectParameter("MegJobNo", megJobNo) :
                new ObjectParameter("MegJobNo", typeof(string));
    
            var directDebitParameter = directDebit.HasValue ?
                new ObjectParameter("DirectDebit", directDebit) :
                new ObjectParameter("DirectDebit", typeof(short));
    
            var spare1Parameter = spare1 != null ?
                new ObjectParameter("Spare1", spare1) :
                new ObjectParameter("Spare1", typeof(string));
    
            var spare2Parameter = spare2 != null ?
                new ObjectParameter("Spare2", spare2) :
                new ObjectParameter("Spare2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_Grid_ImportOrders_Adv3", dateParameter, custNameParameter, siteNameParameter, custRefParameter, dueDateParameter, categoryParameter, itemDescriptionParameter, qtyParameter, netParameter, taxParameter, grossParameter, profitParameter, currencyParameter, custOrderNoParameter, miniPackParameter, siteSurveyDateParameter, backlogCommentsParameter, depositParameter, assignedToParameter, megJobNoParameter, directDebitParameter, spare1Parameter, spare2Parameter);
        }
    
        public virtual int CRM_Temp_ImportOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_Temp_ImportOrders");
        }
    
        public virtual int CRM_Temp_ImportOrders_Adv()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_Temp_ImportOrders_Adv");
        }
    
        public virtual int CRM_Temp_ImportOrders_Adv2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_Temp_ImportOrders_Adv2");
        }
    
        public virtual int CRM_Temp_ImportOrders_Adv3()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_Temp_ImportOrders_Adv3");
        }
    
        public virtual int GP_Grid_ImportInvoices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GP_Grid_ImportInvoices");
        }
    
        public virtual int GP_Grid_ImportOutstandingInvoices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GP_Grid_ImportOutstandingInvoices");
        }
    
        public virtual int GP_Grid_ImportPostedInvoices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GP_Grid_ImportPostedInvoices");
        }
    
        public virtual int GP_Temp_ImportInvoices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GP_Temp_ImportInvoices");
        }
    
        public virtual int GP_Temp_ImportOutstandingInvoices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GP_Temp_ImportOutstandingInvoices");
        }
    
        public virtual int GP_Temp_ImportPostedInvoices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GP_Temp_ImportPostedInvoices");
        }
    
        public virtual int Sage_DeletePreviousOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sage_DeletePreviousOrders");
        }
    
        public virtual int Sage_Grid_ImportInvoices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sage_Grid_ImportInvoices");
        }
    
        public virtual int Sage_Grid_ImportOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sage_Grid_ImportOrders");
        }
    
        public virtual ObjectResult<Sage_Temp_ImportInvoices_Result> Sage_Temp_ImportInvoices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sage_Temp_ImportInvoices_Result>("Sage_Temp_ImportInvoices");
        }
    
        public virtual int proc_GetCogsValue(Nullable<int> cogsFilter)
        {
            var cogsFilterParameter = cogsFilter.HasValue ?
                new ObjectParameter("CogsFilter", cogsFilter) :
                new ObjectParameter("CogsFilter", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetCogsValue", cogsFilterParameter);
        }
    
        [DbFunction("Purchase_SaleLedgerEntities", "GetNetandGrossCogs")]
        public virtual IQueryable<GetNetandGrossCogs_Result> GetNetandGrossCogs(Nullable<int> cogsFilter)
        {
            var cogsFilterParameter = cogsFilter.HasValue ?
                new ObjectParameter("CogsFilter", cogsFilter) :
                new ObjectParameter("CogsFilter", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNetandGrossCogs_Result>("[Purchase_SaleLedgerEntities].[GetNetandGrossCogs](@CogsFilter)", cogsFilterParameter);
        }
    }
}
